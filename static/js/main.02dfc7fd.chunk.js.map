{"version":3,"sources":["MapComponent.js","App.js","serviceWorker.js","index.js"],"names":["stateInicial","map","mapIsRendered","direcciones","direccionInicial","lat","lng","direccionFinal","menuSearchDisplay","google","window","directionsRenderer","maps","DirectionsRenderer","directionsService","DirectionsService","MapComponent","state","googleChecker","console","log","initMap","setState","setTimeout","getRoute","length","calculateAndDisplayRoute","div","refs","Search","classList","add","remove","cords","Map","mapContainer","zoom","center","setMap","handleChange","e","target","name","nombre","value","initAutocomplete","autocompleteDeparture","autocompleteDestination","request","origin","LatLng","destination","travelMode","route","result","status","setDirections","showMenu","this","input","places","Autocomplete","types","setFields","addListener","place","getPlace","geometry","location","Fragment","className","id","ref","onClick","onChange","autoComplete","placeholder","type","Component","initialState","currentLocation","App","showPosition","position","coords","latitude","long","longitude","getLocation","navigator","geolocation","getCurrentPosition","alert","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02dfc7fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst stateInicial = {\n  map: {\n    map: {},\n  },\n  mapIsRendered: false,\n  direcciones: {\n    direccionInicial: {\n      lat: 0,\n      lng: 0\n    },\n    direccionFinal: {\n      lat: 0,\n      lng: 0\n    }\n  },\n  menuSearchDisplay: false\n}\nconst google = window.google\nconst directionsRenderer = new google.maps.DirectionsRenderer();\nconst directionsService = new google.maps.DirectionsService();\n\nclass MapComponent extends Component {\n\n  state = { ...stateInicial }\n\n  componentDidMount() {\n    this.googleChecker();\n  }\n  googleChecker = () => {\n    if (!window.google) {\n      setTimeout(this.googleChecker, 100);\n      console.log(\"not there yet\");\n    } else {\n      console.log(\"we're good to go!!\");\n      this.initMap();\n      this.setState({ mapIsRendered: true })\n    }\n  }\n  getRoute = (direcciones) => {\n    if (this.state.direcciones.length === 0) {\n      console.log(\"no hay\")\n    }\n    this.calculateAndDisplayRoute(direcciones, directionsService, directionsRenderer)\n    const div = this.refs.Search\n    div.classList.add(\"dismiss\");\n    div.classList.remove(\"selected\");\n    this.setState({ menuSearchDisplay: false })\n  }\n\n  initMap = () => {\n    const cords = { lat: 19.4326077, lng: -99.13320799999997 };\n    const Map = new google.maps.Map(this.refs.mapContainer, {\n      zoom: 8,\n      center: {\n        lat: cords.lat,\n        lng: cords.lng\n      }\n    })\n    directionsRenderer.setMap(Map);\n    this.setState({ map: Map })\n  }\n\n  handleChange = e => {\n    this.setState({\n      direcciones: {\n        ...this.state.direcciones,\n        [e.target.name]: {\n          nombre: e.target.value\n        }\n      }\n    })\n    this.initAutocomplete(e.target.name)\n  }\n  initAutocomplete = (name) => {\n    name === 'direccionInicial' ? this.autocompleteDeparture() : this.autocompleteDestination()\n  }\n\n\n  autocompleteDeparture(e) {\n    const input = this.refs.direccionInicial\n    const autocompleteDestination = new google.maps.places.Autocomplete(input, { types: ['address'] })\n    autocompleteDestination.setFields(['geometry']);\n    autocompleteDestination.addListener('place_changed', () => {\n      const place = autocompleteDestination.getPlace();\n      const lat = place.geometry.location.lat();\n      const lng = place.geometry.location.lng();\n      this.setState({\n        direcciones: {\n          ...this.state.direcciones,\n          direccionInicial: {\n            lat: lat,\n            lng: lng\n          }\n        }\n      })\n    });\n  }\n  autocompleteDestination(e) {\n    const input = this.refs.direccionFinal\n    const autocompleteDestination = new google.maps.places.Autocomplete(input, { types: ['address'] })\n    autocompleteDestination.setFields(['geometry']);\n    autocompleteDestination.addListener('place_changed', () => {\n      const place = autocompleteDestination.getPlace();\n      const lat = place.geometry.location.lat();\n      const lng = place.geometry.location.lng();\n      this.setState({\n        direcciones: {\n          ...this.state.direcciones,\n          direccionFinal: {\n            lat: lat,\n            lng: lng\n          }\n        }\n      })\n    });\n  }\n  calculateAndDisplayRoute = (direcciones, directionsService, directionsRenderer) => {\n    const start = new google.maps.LatLng(direcciones.direccionInicial);\n    const end = new google.maps.LatLng(direcciones.direccionFinal);\n    const request = {\n      origin: start,\n      destination: end,\n      travelMode: 'DRIVING'\n    };\n    directionsService.route(request,\n      (result, status) => {\n        if (status === 'OK') {\n          console.log(\"result\", result)\n          directionsRenderer.setDirections(result);\n        }\n      });\n  }\n  showMenu = () => {\n    const div = this.refs.Search\n\n    if (this.state.menuSearchDisplay === false) {\n      div.classList.add(\"dismiss\");\n      div.classList.remove(\"selected\");\n      this.setState({ menuSearchDisplay: true })\n    } else {\n      div.classList.add(\"selected\");\n      div.classList.remove(\"dismiss\");\n      this.setState({ menuSearchDisplay: false })\n\n    }\n  }\n  render() {\n    return (\n\n      <React.Fragment>\n\n        <div className=\" map-holder\" >\n          <div id=\"map\" ref=\"mapContainer\" />\n        </div>\n        <div className=\"container\">\n\n          <div className=\"Search \" ref=\"Search\">\n            <div className=\"Search-inputs\">\n              <button onClick={this.showMenu} className=\"get-search-menu\"> > </button>\n              <input\n                onChange={this.handleChange}\n                name=\"direccionInicial\"\n                autoComplete=\"off\"\n                placeholder=\"¿En dónde te recogemos?\"\n                ref=\"direccionInicial\" type=\"text\"\n              />\n              <input\n                onChange={this.handleChange}\n                name=\"direccionFinal\"\n                autoComplete=\"off\"\n                placeholder=\"¿A dónde vámos?\"\n                ref=\"direccionFinal\" type=\"text\"\n              />\n              <input\n                type=\"submit\"\n                className=\" button btn\"\n                value=\"Buscar Ruta\"\n                onClick={() => this.getRoute(this.state.direcciones)}\n              />\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\nexport default MapComponent","import React, { Component } from 'react';\n\nimport './App.css';\nimport MapComponent from './MapComponent';\n\n\nconst initialState = {\n  currentLocation: {\n    lat: '',\n    lng: ''\n  }\n}\nclass App extends Component {\n\n  state = {\n    ...initialState\n  }\n  componentDidMount() {\n    this.getLocation()\n  }\n  getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    } else {\n      alert(\"Geolocation is not supported by this browser.\")\n    }\n  }\n\n  showPosition = (position) => {\n    const lat = position.coords.latitude\n    const long = position.coords.longitude;\n    this.setState({\n      currentLocation: { lat, long }\n    })\n\n  }\n  render() {\n    return (\n      <div className=\"App\" ref=\"mapContainer\" >\n        <MapComponent\n          currentLocation={this.state.currentLocation}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}